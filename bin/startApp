#!/bin/bash
cd $(npm root -g)/fullstack-monitor-cli

print_commands() {
  echo "To start the server: --start OR -s"
  echo "To listen to traffic in terminal: --listen OR -l"
  echo "To listen to traffic in chrome: --browser OR -b"
  echo "To kill the server: --kill OR -k"
  echo "To restart the server: --restart OR -r"
  echo "To view available commands: --commands OR -c"
  echo "For a brief tutorial: --tutorial OR -t"
  echo "For a brief tutorial: --tutorial OR -t"
}

print_tutorial() {
  echo "First start the server:"
  echo "fullstack-monitor-cli -s"
  echo "Then listen to the server in the terminal:"
  echo "fullstack-monitor-cli -l"
  echo "And/or listen to the server in the browser:"
  echo "fullstack-monitor-cli -b"
  echo "Then when you are done kill the server:"
  echo "fullstack-monitor-cli -k"
}

print_help() {
  print_commands
  echo "---------------------------------"
  echo "The server runs on port 3861 by default"
  echo "---------------------------------"
  echo "To log monitoring data on the server,"
  echo "you must install fullstack-monitor"
  echo "on one of your projects, using:"
  echo "-------------------"
  echo "npm install fullstack-monitor"
  echo "-------------------"
  echo "Then when you run that project and"
  echo "the fullstack-monitor-cli server"
  echo "at the same time, logging and request"
  echo "data will be stored on the fullstack-monitor-cli"
  echo "server, and viewable on the fullstack-monitor-cli"
  echo "clients."
}

print_intro() {
  echo "--- Welcome to fullstack-monitor-cli! ---"
  echo "For instructions: --help OR -h"
  echo "To view available commands: --commands OR -c"
  echo "For a brief tutorial: --tutorial OR -t"
  echo "----------- Enjoy monitoring! -----------"
}

listen_in_terminal() {
  echo 'Listening on port: http://localhost:3861/'
  node server/cmdApp/cmd.js;
}

kill_server() {
  pkill -f server/index.js
  echo 'Server shut down.'
}

start_server() {
  node server/index.js &
  echo 'Server booted on http://localhost:3861/'
}

if [[ $1 == '--listen' || $1 == '-l' ]]; then
  listen_in_terminal
elif [[ $1 == '--kill' || $1 == '-k' ]]; then
  kill_server
elif [[ $1 == '--restart' || $1 == '-r' ]]; then
  kill_server
  start_server
elif [[ $1 == '--start' || $1 == '-s' ]]; then
  start_server
elif [[ $1 == '--browser' || $1 == '-b' ]]; then
  open -a "Google Chrome" http://localhost:3861/
elif [[ $1 == '--tutorial' || $1 == '-t' ]]; then
  print_tutorial
elif [[ $1 == '--commands' || $1 == '-c' ]]; then
  print_commands
elif [[ $1 == '--help' || $1 == '-h' ]]; then
  print_help
else
  print_intro
fi


